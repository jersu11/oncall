<?php 
/**
 * @file
 * A module that lets people connect with an 'on call' team to report problems, and 
 * have team members communicate with each other as well as with the people. The module
 * uses the Twilio cloud communication service for interactivity over the phone and SMS
 *
 * @author  Jeremy Sullivan ("jersu", http://drupal.org/user/47878)
 */

/**
 * hook_menu()
 */
function oncall_menu() {
  // twilio endpoints
  $items['oncall/connect'] = array(
    'page callback'      => 'oncall_twilio_connect',
    'access arguments'   => array('oncall connect'),
    'type'               => MENU_CALLBACK,
  );
  $items['oncall/dispatch'] = array(
    'page callback'      => 'oncall_twilio_dispatch',
    'access arguments'   => array('oncall connect'),
    'type'               => MENU_CALLBACK,
  );
  $items['oncall/record/%'] = array(
    'page callback'      => 'oncall_twilio_record',
    'page arguments'     => array(2),
    'access arguments'   => array('oncall connect'),
    'type'               => MENU_CALLBACK,
  );
  $items['oncall/sms'] = array(
    'page callback'      => 'oncall_twilio_sms',
    'access arguments'   => array('oncall connect'),
    'type'               => MENU_CALLBACK,
  );
  
  // drupal pages/callbacks
  $items['oncall/messages'] = array(
    'title'              => 'On Call Messages',
    'descriptions'       => 'Incoming voice recordings from the On Call service',
    'page callback'      => 'oncall_page_messages',
    'access arguments'   => array('oncall access messages'),
  );
  $items['oc/l/%'] = array( // short for "oncall/listen/%msgid"
    'page callback'      => 'oncall_listen_message',
    'page arguments'     => array(2),
    'access arguments'   => array('oncall connect'),
    'type'               => MENU_CALLBACK,
  );
  
  // admin pages
  $items['admin/config/services/oncall'] = array(
    'title'              => 'On Call Config Page',
    'description'        => 'Configure the site description, the number of items per feed and whether feeds should be titles/teasers/full-text.',
    'page callback'      => 'oncall_page_config',
    'access arguments'   => array('oncall admin'),
    'file'               => 'oncall.admin.inc',
  );
  $items['admin/config/services/oncall/main'] = array(
    'title'              => 'On Call Config Page',
    'type'               => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/services/oncall/extra'] = array(
    'title'              => 'Additional On Call Settings',
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('oncall_config_extra_form'),
    'access arguments'   => array('oncall admin'),
    'file'               => 'oncall.admin.inc',
    'weight'             => 2,
    'type'               => MENU_LOCAL_TASK,
  );
  $items['admin/config/services/oncall/member/add'] = array(
    'title'              => 'Add an On Call Team Member',
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('oncall_member_edit_form'),
    'access arguments'   => array('oncall admin'),
    'file'               => 'oncall.admin.inc',
    'type'               => MENU_CALLBACK,
  );
  $items['admin/config/services/oncall/member/edit/%'] = array(
    'title'              => 'Edit an On Call Team Member',
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('oncall_member_edit_form', 6),
    'access arguments'   => array('oncall admin'),
    'file'               => 'oncall.admin.inc',
    'type'               => MENU_CALLBACK,
  );
  
  return $items;
}


/**
 * hook_perm().
 */
function oncall_permission() {
  return array(
    'oncall admin' => array(
      'title' => t('Administer On Call Settings'), 
      'description' => t('Allow users to modify the On Call settings')
    ),
    'oncall access messages' => array(
      'title' => t('Access Status Messages'), 
      'description' => t('View and listen to all incoming messages')
    ),
    
    // By design, a very open permision, that simply lets one interact with the service.
    // The anon role should be given this permission, otherwise, all phone connections
    // will be met with an error. Disabling this permission makes it easy to turn off
    // any telephone interaction immediately, for everyone.
    'oncall connect' => array(
      'title' => t('Use The On Call Service'), 
      'description' => t('Using the telephone, allow users to interact with our phone tree')
    ),
  );
}


/**
 * hook_theme()
 */
function oncall_theme() {
  return array(
    'oncall_audio' => array(
      'variables' => array('src' => NULL),
    ),
  );
}


/**
 * ##############################
 *     MENU HANDLERS
 * ##############################
 */

/**
 * Twilio initial greeting and phone tree
 * - welcome the caller and give them options
 */
function oncall_twilio_connect() {
  $twilio_conf = oncall_load_twilio_api();
  
  $team_numbers = oncall_get_team_numbers();
  $team_leader = oncall_get_team_leader();
  $say = "";
  
  // opt 1
  if (count($team_numbers)) {
    $say .= "To report a problem to the on call team, press 1. ";
  }
  
  // opt 2
  if ($team_leader) {
    $say .= "Press 2 to connect directly with the on call team leader. ";
  }
  
  // opt 3
  if (in_array($_REQUEST['From'], $team_numbers, TRUE)) {
    $say .= "Press 3 to leave an update of the issue status. ";
  }
  
  if ($say) {
    $say .= "Press 0 to hear these options again. ";
  }
  
  $q = "SELECT message FROM {oncall_message} WHERE type = :type AND created > :time ORDER BY created";
  $args = array(
    ":type" => "status", 
    ":time" => REQUEST_TIME - variable_get('oncall_expire_status_msg', 86400)
  );
  $status_msg = db_query_range($q, 0, 1, $args)->fetchField();
      
  if (!$status_msg) {
    $status_msg = oncall_get_message('nostatus');
  }
  
  // build the response object 
  $response = new Services_Twilio_Twiml();
  $response->play(oncall_get_message('welcome'));
  
  if ($say) {
    $response->play($status_msg);
    $gather = $response->gather(array('numDigits' => 1, 'action' => '/oncall/dispatch'));
    $gather->say($say);
  }
  else {
    $response->say("There are currently no available members of the on call team. Sorry. Good bye.");
  }
  
  echo $response;
  return NULL;
}


/**
 * Twilio dispatch
 *  - our caller just told us what to do, now we do it
 */
function oncall_twilio_dispatch() {
  $twilio_conf = oncall_load_twilio_api();
  
  $choice = $_REQUEST['Digits'];
  $from = $_REQUEST['From'];  
  $leader_phone = oncall_get_team_leader();
  $team_numbers = oncall_get_team_numbers();
  
  // reset choice to 0, the default option, if problem choices are made
  if ($choice == 2 && !$leader_phone) {
    // if the caller press 2, confirm that the team leader is available to talk to
    $choice = 0;
  }
  elseif ($choice == 3 && !in_array($from, $team_numbers, TRUE)) {
    // if the caller pressed 3, confirm that they are on the 'on call' team
    $choice = 0;
  }
    
  // build the response object
  $response = new Services_Twilio_Twiml();
  
  switch ($choice) {
    case 1:
      // leave a help message for the on call team
      $response->say("Record your help request after the tone, press pound when complete.");
      $response->record(array(
        'action' => '/oncall/record/help',
        'maxLength' => 30
      ));
      break;
      
    case 2:
      // connect directly with the on call team leader
      if ($from == $leader_phone) {
        $response->say("You are the leader. You can do many things, but you can't call yourself");
      }
      else {
        $response->dial($leader_phone);
        $response->say("The call failed or the remote party hung up. Goodbye.");  
      }
      break;
      
    case 3:
      // on call team member leaves a status update message
      $response->say("Record the issue status after the tone, press pound when complete.");
      $response->record(array(
        'action' => '/oncall/record/status',
        'maxLength' => 30
      ));
      break;
      
    default:
      // if the caller pressed anything else, send them back home
      drupal_goto('oncall/connect');
  }
  
  echo $response;
  return NULL;
}


/**
 * Twilio recording redirect
 * - store the url of the twilio recording in our database
 */
function oncall_twilio_record($type) {
  $twilio_conf = oncall_load_twilio_api();
  
  if ($message = $_REQUEST['RecordingUrl']) {
    $msgid = oncall_msg_token();
    db_insert('oncall_message')
     ->fields(array(
      'msgid'   => $msgid,
      'created' => REQUEST_TIME,
      'type'    => $type,
      'message' => $message,
      'phone'   => $_REQUEST['From'],
     ))
     ->execute();  
  }

  // if $type = 'help', send an SMS to the on call team
  if ($type == 'help' && $msgid) {
    oncall_send_sms_listen($msgid);
  }

  // build the response object
  $response = new Services_Twilio_Twiml();
  $response->say('Your message has been received, thank you.');
  echo $response;
  return NULL;
}


/**
 * Twilio SMS 
 * - Echo incoming SMS messages to everyone on the 'on call' team. Only team members
 *   can send SMS messages. Append the SMS sender's team name so that we know where 
 *   it came from.
 */
function oncall_twilio_sms() {
  $twilio_conf = oncall_load_twilio_api();
  
  $from = $_REQUEST['From'];
  $msg = $_REQUEST['Body'];
  $phone_number = variable_get('oncall_phone_number', '');
  $team_numbers = oncall_get_team_numbers();
  
  // Twilio Rest Client
  $client = new Services_Twilio($twilio_conf['account_sid'], $twilio_conf['auth_token']);
  
  if (!in_array($from, $team_numbers, TRUE)) {
    
    // only team members can send to this number. if they are not on the team, return a 'sorry' note
    $msg = "Sorry, only on call team members may send SMS messages on this service";
    $sms = $client->account->sms_messages->create(
      $phone_number,  // from our twilio number
      $from,          // return to sender
      $msg            // the sms sorry message
    );
    
  }
  else {
  
    // send an sms to everyone on the team
    $team_names = array_flip($team_numbers);
    $name = $team_names[$from];
    foreach ($team_numbers as $number) {
      if ($number != $from ) {
        $sms = $client->account->sms_messages->create(
          $phone_number,      // from our twilio number
          $number,            // send to our team member
          $msg . " ~" . $name // the sms message appended with the name of team member who sent it
        );
      }
    }
    
  }

  return NULL;
}


/**
 * OnCall Messages List
 *  - list all the voice messages that have come in on a single page
 *  - the list diferentiates 'help' messages and 'status' messages left by the team
 */
function oncall_page_messages() {
  // get the team names/numbers. if a status message was left by a team member, we display their name
  $team_numbers = oncall_get_team_numbers();
  $team_names = array_flip($team_numbers);

  // @TODO make this a pager query
  $result = db_query("SELECT type, created, message, phone FROM {oncall_message} ORDER BY created DESC");
  
  $rows = array();
  $header = array(t('Type'), t('Date/Time'), t('Message'), t('Left By'));
  foreach ($result as $msg) {
    $left_by = (isset($team_names[$msg->phone])) ? $team_names[$msg->phone] : $msg->phone;
    $dte = format_date($msg->created, 'short');
    $audio = theme('oncall_audio', array('src' => $msg->message . '.mp3'));
    $rows[] = array($msg->type, $dte, $audio, $left_by);
  }
  
  return theme('table', array('header' => $header, 'rows' => $rows));
}


/**
 * Twilio Message ShortUrl
 *  - rather than send in SMS the very long Twilio URL where our voice message is stored,
 *    this menu handler lets us build a redirect based on a much shorter URL
 */
function oncall_listen_message($msgid) {
  $msgurl = db_query("SELECT message FROM {oncall_message} WHERE BINARY msgid = :id", array(':id' => $msgid))->fetchField();
    
  if ($msgurl) {
    // force mp3 output for browsers
    drupal_goto($msgurl . ".mp3");
  }
  else {
    return "that message doesn't exist";
  }
}


/**
 * #############################
 *     HELPER FUNCTIONS
 * #############################
 * functions that assist in the operation of the module
 */

/**
 * Send SMS with link to 'help me' voicemail
 *  - when a 'help me' call comes in, we want the team to know about it right away
 */
function oncall_send_sms_listen($msgid) {
  $msg = variable_get('oncall_sms_msg', 'A new help request has been received. Listen here @url');
  $msg_data = array('@url' => url('oc/l/' . $msgid, array('absolute' => TRUE)));

  // Twilio Rest Client
  $config = twiliophp_config_load();
  $client = new Services_Twilio($config['account_sid'], $config['auth_token']);
 
  // get the team's phone numbers. 
  $team_numbers = oncall_get_team_numbers();
 
  // send an sms to everyone on the team
  foreach ($team_numbers as $number) {
    $sms = $client->account->sms_messages->create(
      variable_get('oncall_phone_number', ''),  // from our twilio number
      $number,                                  // send to our team member
      t($msg, $msg_data)                        // the sms message
    );
  }
} 


/**
 * Return the URL for the requested 'canned' message
 */
function oncall_get_message($type = 'welcome') {
  $oncall_path = drupal_get_path('module', 'oncall') . "/sound/";
  $msgs = array(
    'welcome' => 'welcome.mp3',
    'nostatus' => 'no_recent_messages.mp3'
  );

  $file_fid = variable_get('oncall_' . $type, 0);
  if ($file_fid) {
    $file_path = file_load($file_fid)->uri;
    $file_url = file_create_url($file_path);
  }
  else {
    $file_path = $oncall_path . $msgs[$type];
    $file_url = url($file_path, array('absolute' => TRUE));
  }
  
   return $file_url;
} 

/**
 * Return the On Call team
 *  - only return the people who are both available and current members of the 
 *    'on call' user roll, and who are not blocked
 */
function oncall_get_team($who = 'available') {
  $team = &drupal_static(__FUNCTION__, array());
  
  if (!isset($team[$who])) {
    $vals = array();
    if ($who == 'available') {
      $result = db_query("SELECT * FROM {oncall_team} WHERE available = 1");
    }
    elseif ($who == 'all') {
      $result = db_query("SELECT * FROM {oncall_team} ORDER BY available DESC");
    }
    foreach ($result as $record) {
      $vals[] = array('ocid' => $record->ocid, 'name' => $record->name, 'phone' => $record->phone, 'leader' => $record->leader, 'available' => $record->available);
    }
    $team[$who] = $vals;
  }
  
  return $team[$who];
}

/**
 * Return just the phone numbers for the On Call team
 *  - prepend each number with '+' for compare with twilio's phone number params (E.164)
 */
function oncall_get_team_numbers() {
  $numbers = &drupal_static(__FUNCTION__);
  
  if (!isset($numbers)) {
    $team = oncall_get_team('available');
    $numbers = array();
    foreach ($team as $member) {
      // add the plus (+) in front of each number
      $numbers[$member['name']] = "+" . $member['phone'];
    }
  }
  
  return $numbers;
}

/**
 * Return the phone number for the team leader
 *  - return false if no team leader selected
 */
function oncall_get_team_leader() {
  if ($leader_phone = db_query("SELECT phone FROM {oncall_team} WHERE leader = 1")->fetchField()) {
    return "+" . $leader_phone;
  }
  else {
    return FALSE;
  }
}


/**
 * Load the Twilio PHP library
 * @return $twilio_config = array with SID and AUTH tokens
 */
function oncall_load_twilio_api() {
  $error = FALSE;

  $info = libraries_load('twilio-php');
  if (!$info['loaded']) {
    watchdog('oncall', 'Twilio API for PHP library did not load');
    $error = TRUE;
  }

  // @TODO: next step, validate that the incoming request is from the Twilio service
  // - http://www.twilio.com/docs/security
  // set error to TRUE if it doesn't validate
  
  if ($error) {
    // redirect to an twiml formatted error message
    $oncall_path = drupal_get_path('module', 'oncall');
    drupal_goto($oncall_path . '/error.xml');
    return NULL;
  }

  return twiliophp_config_load();
}


/**
 * RANDOM TOKEN GENERATOR (for Message IDs -> used in URLs)
 *
 * These next couple functions were pulled from the module 'ShURLy'. That module
 * does a number of things related to the generation of short urls. I just needed
 * a semi-random looking URL token. Because the URL that allows team members to
 * listen to incoming voice messages, by necessity, has to be public, we have to 
 * have a random value to prevent one from incrementing the URL arg by +1 to listen
 * to every message in the system - exclusivity through obfuscation.
 */

/**
 * Return the next 'random' token based on an internal tracking id
 */
function oncall_msg_token() {
  $count = variable_get('oncall_counter', 3249); // starts the URLs with 3 characters
  do {
    $count++;
    // counter is stored as base 10
    // $index is a-z, A-Z, 0-9, sorted randomly, with confusing characters (01lIO) removed - 57 characters
    // a custom index can be created as a variable override in settings.php
    $index = variable_get('shurly_index', 'kZ4oJ3Uwi5STqcpGNxfYgMQAdPWmsenh78XB26uLbEaRDzKrHVj9CyFtv');
    $str = oncall_dec2any($count, NULL, $index);
 
    // check that this string hasn't been used already
    // check that the string is a valid (available) path
  } while (oncall_token_exists($str) !== FALSE); 
 
  variable_set('oncall_counter', $count);
 
  return $str;
 }

/**
 * From http://www.php.net/manual/en/function.base-convert.php#52450
 *
 * Parameters:
 * $num - your decimal integer
 * $base - base to which you wish to convert $num (leave it 0 if you are providing $index or omit if you're using default (62))
 * $index - if you wish to use the default list of digits (0-1a-zA-Z), omit this option, otherwise provide a string (ex.: "zyxwvu")
 */
function oncall_dec2any($num, $base=62, $index=FALSE) {
  if (!$base) {
    $base = strlen($index);
  }
  elseif (!$index) {
    // note: we could rearrange this string to get more random looking URLs
    // another note, to create printable URLs, omit the following characters: 01lIO
    $index = substr("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, $base);
  }
  $out = "";
  for ($t = floor(log10($num) / log10($base)); $t >= 0; $t--) {
    $a = floor($num / pow($base, $t));
    $out = $out . substr($index, $a, 1);
    $num = $num - ($a * pow($base, $t));
  }
  return $out;
}

/**
 * check that the message id (the token) isn't already in use
 */
function oncall_token_exists($str) {
  // we add 'BINARY' to ensure that we're doing a CASE SENSITIVE query
  $query = "SELECT * FROM {oncall_message} WHERE BINARY msgid = :short";  

  // the only reason this would return true is if the variable 'oncall_counter'
  // was somehow reset. So, if we match TRUE, we'll increment the counter by 1000
  if (FALSE) {
    $count = variable_get('oncall_counter', 3249);
    variable_set('oncall_counter', $count + 1000);
    return TRUE;
  }
 
  return FALSE;
}


/**
 * Theme audio tag
 * - html5 audio tag. if browser doesn't support native mp3 playback, 
 *   it should show a link to the file
 */
function theme_oncall_audio($variables) {
  $src = $variables['src'];
  
  $out  = "<audio controls preload='auto' autobuffer>";
  $out .= "<source src='" . $src . "' type='audio/mp3' />";
  $out .= "<a href='" . $src . "'>Source MP3</a>";
  $out .= "</audio>";

  return $out;
}
